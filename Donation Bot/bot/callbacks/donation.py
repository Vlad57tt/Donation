from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.keyboards import donate_menu, pay_menu, back_button
from bot.facrotry import DonateAmountFac
from bot.state import ChoosePaymentAmonuntState
from bot.utills import create_invoice, getexchange, get_status

router = Router()


@router.callback_query(F.data == "donate")
async def donate(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞",
                                 reply_markup=donate_menu())


@router.callback_query(DonateAmountFac.filter())
async def donate_choosen(call: CallbackQuery, callback_data: DonateAmountFac):
    amount = callback_data.amount
    rates = await getexchange()
    usdt_amount = float(amount) / float(rates)
    total_usdt = usdt_amount * (1 + 15 / 100)
    invoice_link, invoice_id = await create_invoice(price=total_usdt)
    await call.message.edit_text(f"""
üí≤–°—É–º–º–∞: {amount}‚ÇΩ
‚è∞–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç
üí∏–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
{invoice_link}
""",
                                 reply_markup=pay_menu(url=invoice_link,id=invoice_id))


@router.callback_query(F.data == "chooseAmount")
async def choose_donate_amount(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞",
                                 reply_markup=back_button())
    await state.set_state(ChoosePaymentAmonuntState.wait_for_amount)


@router.callback_query(lambda c: c.data and c.data.startswith('pay/check'))
async def process_callback(callback_query: CallbackQuery):
    payload = callback_query.data
    user_id = callback_query.from_user.id
    _, order_id_param = payload.split('?', 1)
    order_id_key, order_id_value = order_id_param.split('=', 1)

    if order_id_key == 'order_id':
        order_id = order_id_value
        try:
            if await get_status(order_id):
                await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞!")
            else:
                await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—à—ë–ª —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è!")
        except Exception as e:
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!\n–ö–æ–¥ –æ—à–∏–±–∫—Ç –¥–ª—è —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:{e}")


